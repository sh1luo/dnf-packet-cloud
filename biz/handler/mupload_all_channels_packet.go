// Code generated by hertztool.

package handler

import (
	"context"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"packet_cloud/service/readwriter"

	"github.com/cloudwego/hertz/pkg/app"
	packet "packet_cloud/biz/model/hertz/packet"
)

// MUploadAllChannelsPacket .
// @router /v1/packet/mupload [POST]
func MUploadAllChannelsPacket(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.MUploadAllChannelsPacketReq
	err = c.BindAndValidate(&req)
	if err != nil || req.McloudPacket == nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	packets, err := readwriter.ReadPacket(readwriter.LFS)
	if err != nil {
		log.Println("[MUploadAllChannelsPacket] read packets error", err)
		c.JSON(consts.StatusInternalServerError, nil)
		return
	}

	m := map[int]string{
		0: "跨1",
		1: "跨2",
		2: "跨3A",
		3: "跨3B",
		4: "跨4",
		5: "跨5",
		6: "跨6",
		7: "跨7",
		8: "跨8",
	}

	for idx, channel := range req.McloudPacket.Channel {
		inserted := &packet.CloudPacket{
			Id:          0,
			Region:      m[idx],
			Name:        req.McloudPacket.Name,
			Channel:     channel,
			Uploader:    req.McloudPacket.Uploader,
			Time:        req.McloudPacket.Time,
			UserPackets: req.McloudPacket.UserPackets,
		}

		if len(packets) > 0 {
			inserted.Id = packets[len(packets)-1].Id + 1
		} else {
			inserted.Id = 1
		}
		packets = append(packets, inserted)
	}

	err = readwriter.SavePacket(packets, readwriter.LFS)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, nil)
		return
	}

	c.JSON(consts.StatusOK, nil)
}
