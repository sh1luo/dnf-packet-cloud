// Code generated by hertztool.

package handler

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	packet "packet_cloud/biz/model/hertz/packet"
	"packet_cloud/service/readwriter"
)

// DeletePacket .
// @router /v1/packet/delete [DELETE]
func DeletePacket(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.DeletePacketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println(err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var (
		deletedIDs = make([]int32, 0)
	)

	packets, err := readwriter.ReadPacket(readwriter.LFS)
	if err != nil {
		log.Println("[DeletePacket] read file error:", err)
		c.JSON(consts.StatusInternalServerError, err)
		return
	}

	remaining := make([]*packet.CloudPacket, 0)
	for _, p := range packets {
		if p.Id >= req.GetFrom() && p.Id <= req.GetTo() {
			deletedIDs = append(deletedIDs, p.Id)
		} else {
			remaining = append(remaining, p)
		}
	}

	err = readwriter.SavePacket(remaining, readwriter.LFS)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err)
		return
	}

	c.JSON(consts.StatusOK, &packet.DeletePacketResp{
		Code: 0,
		Msg:  fmt.Sprintf("删除成功, 共删除 %d 个数据包, 被删除的数据包 ID 为 %v", len(deletedIDs), deletedIDs),
	})
}
