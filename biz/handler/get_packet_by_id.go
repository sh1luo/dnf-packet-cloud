// Code generated by hertztool.

package handler

import (
	"context"
	"github.com/bytedance/sonic"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"packet_cloud/service/readwriter"
	"packet_cloud/util"

	"github.com/cloudwego/hertz/pkg/app"
	packet "packet_cloud/biz/model/hertz/packet"
)

// GetPacketByID .
// @router /v1/packet/get/:id [GET]
func GetPacketByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.GetPacketByIDReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	packets, err := readwriter.ReadPacket(readwriter.LFS)
	if err != nil {
		log.Printf("[GetPacketByID] username=%s, time=%s, error=%s\n", req.Username, req.Time, err)
		c.JSON(consts.StatusInternalServerError, err)
		return
	}

	for _, p := range packets {
		if p.Id != req.GetId() {
			continue
		}

		bs, err := sonic.Marshal(p)
		if err != nil {
			log.Printf("[GetPacketByID] marshal error, username=%s, time=%s, id=%d, error=%s\n", req.Username, req.Time, req.GetId(), err)
			c.JSON(consts.StatusInternalServerError, err)
			return
		}

		encrypted, err := util.AESCBCEncrypt(bs)
		if err != nil {
			log.Printf("[GetPacketByID] aes error, username=%s, time=%s, id=%d, error=%s\n", req.Username, req.Time, req.GetId(), err)
			c.JSON(consts.StatusInternalServerError, err)
			return
		}

		c.JSON(consts.StatusOK, packet.GetPacketByIDResp{
			Code:        0,
			Msg:         "获取云数据包成功",
			UserPackets: encrypted,
		})
		return

	}

	log.Printf("[GetPacketByID] packet not found, username=%s, time=%s, id=%d\n", req.Username, req.Time, req.GetId())

	c.JSON(consts.StatusOK, nil)
}
