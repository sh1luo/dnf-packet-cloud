// Code generated by hertz generator.

package packet

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"packet_cloud/biz/model"
	packet "packet_cloud/biz/model/hertz/packet"
	"sync"
)

var (
	writeLock = sync.RWMutex{}
)

// UploadPacket .
// @router /v1/packet/upload [POST]
func UploadPacket(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.UploadPacketReq
	err = c.BindAndValidate(&req)
	if err != nil || req.CloudPacket == nil || req.CloudPacket.Name == "" || req.CloudPacket.UserPackets == nil ||
		req.CloudPacket.Region == "" || req.CloudPacket.Channel == "" || req.CloudPacket.Uploader == "" || req.CloudPacket.Time == "" {
		c.String(consts.StatusBadRequest, "invalid params")
		return
	}

	resp := new(packet.UploadPacketResp)

	inserted := &packet.CloudPacket{
		Id:          0,
		Region:      req.CloudPacket.Region,
		Name:        req.CloudPacket.Name,
		Channel:     req.CloudPacket.Channel,
		Uploader:    req.CloudPacket.Uploader,
		Time:        req.CloudPacket.Time,
		UserPackets: req.CloudPacket.UserPackets,
	}

	writeLock.Lock()
	defer writeLock.Unlock()

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("[UploadPacket] read packets error", err)
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	if len(packets) > 0 {
		inserted.Id = packets[len(packets)-1].Id + 1
	} else {
		inserted.Id = 1
	}
	packets = append(packets, inserted)

	err = model.SavePackets(packets)

	if err != nil {
		resp.Code = 501
		resp.Msg = "上传失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Code = 0
	resp.Msg = "上传成功"

	c.JSON(consts.StatusOK, resp)
}

// GetPacket .
// @router /v1/packet/get [GET]
func GetPacket(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.GetPacketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(packet.GetPacketResp)

	writeLock.RLock()
	defer writeLock.RUnlock()

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("[GetPacket] read file error:", err)
		resp.Code = 501
		resp.Msg = "获取云数据包失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.CloudPackets = packets
	resp.Code = 0
	resp.Msg = "获取云数据包成功"

	c.JSON(consts.StatusOK, resp)
}

// DeletePacket .
// @router /v1/packet/delete/:id [DELETE]
func DeletePacket(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.DeletePacketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println(err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(packet.DeletePacketResp)

	writeLock.Lock()
	defer writeLock.Unlock()

	deletedID := make([]int32, 0)

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("[DeletePacket] read file error:", err)
		resp.Code = 501
		resp.Msg = "删除失败，读数据包失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	notDeletedPackets := make([]*packet.CloudPacket, 0)
	for idx, p := range packets {
		if p.Id != req.Id {
			notDeletedPackets = append(notDeletedPackets, packets[idx])
		} else {
			deletedID = append(deletedID, p.Id)
		}
	}

	if len(deletedID) > 0 {
		resp.Code = 0
		resp.Msg = fmt.Sprintf("删除成功: %v", deletedID)
		c.JSON(consts.StatusOK, resp)

		err = model.SavePackets(notDeletedPackets)
		if err != nil {
			resp.Code = 501
			resp.Msg = "删除后保存失败"
			c.JSON(consts.StatusOK, resp)
		}

		return
	}

	resp.Code = -1
	resp.Msg = fmt.Sprintf("未找到删除数据，request id = %d", req.GetId())

	c.JSON(consts.StatusOK, resp)
}
