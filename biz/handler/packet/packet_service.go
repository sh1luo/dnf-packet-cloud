// Code generated by hertz generator.

package packet

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"packet_cloud/biz/model"
	packet "packet_cloud/biz/model/hertz/packet"
	"sync"
)

var (
	writeLock = sync.Mutex{}
)

// CreatePacketResponse .
// @router /v1/user/create [POST]
func CreatePacketResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.CreatePacketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(packet.CreatePacketResp)

	p := &packet.Packet{
		ID:         req.ID,
		Region:     req.Region,
		Name:       req.Name,
		Content:    req.Content,
		Channel:    req.Channel,
		Uploader:   req.Uploader,
		Time:       req.Time,
		SendTiming: req.SendTiming,
	}

	writeLock.Lock()

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("[ReadPackets] read packets error", err)
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	if len(packets) > 0 {
		p.ID = packets[len(packets)-1].ID + 1
	} else {
		p.ID = 1
	}
	packets = append(packets, p)

	err = model.SaveFile(packets)

	writeLock.Unlock()

	if err != nil {
		resp.Code = 501
		resp.Msg = "上传失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Code = 0
	resp.Msg = "上传成功"
	c.JSON(consts.StatusOK, resp)
}

// QueryPacketResponse .
// @router /v1/packet/query [POST]
func QueryPacketResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.QueryPacketsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(packet.QueryPacketsResp)

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("read file error:", err)
		resp.Code = 501
		resp.Msg = "获取云数据包失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Packet = packets
	resp.Code = 0
	resp.Msg = "获取云数据包成功"
	c.JSON(consts.StatusOK, resp)
}

// DeleteUserResponse .
// @router /v1/user/delete/:id [POST]
func DeleteUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req packet.DeletePacketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(packet.DeletePacketResp)

	writeLock.Lock()
	defer writeLock.Unlock()

	deleted := make([]int64, 0)

	packets, err := model.ReadPackets()
	if err != nil {
		log.Println("read file error:", err)
		resp.Code = 501
		resp.Msg = "删除失败，读数据包失败"
		c.JSON(consts.StatusOK, resp)
		return
	}

	for idx, p := range packets {
		if p.ID == req.ID {
			packets = append(packets[:idx], packets[idx+1:]...)
			deleted = append(deleted, p.ID)
		}
	}

	if len(deleted) > 0 {
		resp.Code = 0
		resp.Msg = fmt.Sprintf("删除成功，删除了%v", deleted)
		c.JSON(consts.StatusOK, resp)

		err = model.SaveFile(packets)
		if err != nil {
			resp.Code = 501
			resp.Msg = "删除后保存失败"
			c.JSON(consts.StatusOK, resp)
			return
		}

		return
	}

	resp.Code = -1
	resp.Msg = fmt.Sprintf("未找到删除数据，id=%d", deleted)
	c.JSON(consts.StatusOK, resp)
}
