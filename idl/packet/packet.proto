syntax = "proto3";

package user;

// biz/model
option go_package = "hertz/packet";

import "api.proto";

message UserPacket{
  int32 id = 1;
  string name = 2;
  string content = 3;
  int32 size = 4;
  string send_timing = 5;
}

message CloudPacket{
  int32 id = 1;
  string region = 2 ;
  string name = 3 ;
  string channel = 4 ;
  string uploader = 5 ;
  string time = 6;

  repeated UserPacket user_packets = 7;
}

message UploadPacketReq{
  CloudPacket cloud_packet = 1;
}

message UploadPacketResp{
  int32 code = 1;
  string msg = 2;
}

message ListPacketReq{
  string time = 1;
  string username = 2;
}

message ListPacketResp{
  int32 code = 1;
  string msg = 2;
  repeated CloudPacket cloud_packets = 3;
}

message GetPacketByIDReq{
  string time = 1;
  string username = 2;
  int32 id = 3;
}

message GetPacketByIDResp{
  int32 code = 1;
  string msg = 2;
  //repeated UserPacket user_packets = 3;
  string user_packets = 3;
}

message DeletePacketReq{
  int32 from = 1;
  int32 to = 2;
}

message DeletePacketResp{
  int32 code = 1;
  string msg = 2;
}

message MCloudPacket{
  int32 id = 1;
  string region = 2 ;
  string name = 3 ;
  repeated string channel = 4 ;
  string uploader = 5 ;
  string time = 6;

  repeated UserPacket user_packets = 7;
}

message MUploadAllChannelsPacketReq{
  MCloudPacket mcloud_packet = 1;
}

message MUploadAllChannelsPacketResp{
  int32 code = 1;
  string msg = 2;
}

//
//message UpdateUserReq{
//  int64 UserID = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
//  string Name = 2 [(api.body) = "name", (api.form) = "name", (api.vd) = "(len($) > 0 && len($) < 100)"];
//  Gender Gender = 3 [(api.body) = "gender", (api.form) = "gender", (api.vd) = "($ == 1||$ == 2)"];
//  int64 Age = 4 [(api.body) = "age", (api.form) = "age", (api.vd) = "$>0"];
//  string Introduce = 5 [(api.body) = "introduce", (api.form) = "introduce", (api.vd) = "(len($) > 0 && len($) < 1000)"];
//}
//
//message UpdateUserResp{
//  int32 int32 = 1;
//  string Msg = 2;
//}
//
//message OtherResp {
//  string Msg = 1;
//}


service PacketService {
  rpc UploadPacket(UploadPacketReq) returns(UploadPacketResp) {
    option (api.post) = "/v1/packet/upload";
  }
  rpc ListPacket(ListPacketReq) returns(ListPacketResp){
    option (api.get) = "/v1/packet/list";
  }
  rpc GetPacketByID(GetPacketByIDReq) returns(GetPacketByIDResp){
    option (api.get) = "/v1/packet/get/:id";
  }
//  rpc UpdateUserResponse(UpdateUserReq) returns(UpdateUserResp){
//    option (api.post) = "/v1/user/update/:user_id";
//  }
  rpc DeletePacket(DeletePacketReq) returns(DeletePacketResp){
    option (api.delete) = "/v1/packet/delete";
  }
  rpc MUploadAllChannelsPacket(MUploadAllChannelsPacketReq) returns(MUploadAllChannelsPacketResp){
    option (api.post) = "/v1/packet/mupload";
  }
}
